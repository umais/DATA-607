PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM df3 g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
result1
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df3=rbind(df,df2,df3)
df3
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM df3 g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
result1
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
result1
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,AVG(Pre_Ratings) FROM result1 GROUP by Id")
avgRate
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(AVG(Pre_Ratings) as int) FROM result1 GROUP by Id")
avgRate
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
#OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM rbind(df,df2,df3,df4,df5,df6,df7) g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(AVG(Pre_Ratings) as int) FROM result1 GROUP by Id")
avgRate
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(AVG(Pre_Ratings) as int) FROM result1 GROUP by Id")
avgRate
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(AVG(Pre_Ratings) as int) as opp FROM result1 GROUP by Id")
#avgRate
results <- sqldf("SELECT g.Id,g.Name,r.State,g.Points,substr(r.Name,16,4) as Pre_Ratings,a.opp
FROM PlayersGames g
JOIN PlayersRatings r on  g.Id=r.Id
JOIN avgRate  a on g.Id=a.Id
")
results
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(ROUND(AVG(Pre_Ratings)) as int) as opp FROM result1 GROUP by Id")
#avgRate
results <- sqldf("SELECT g.Id,g.Name,r.State,g.Points,substr(r.Name,16,4) as Pre_Ratings,a.opp
FROM PlayersGames g
JOIN PlayersRatings r on  g.Id=r.Id
JOIN avgRate  a on g.Id=a.Id
")
results
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(ROUND(AVG(Pre_Ratings)) as int) as average_opponent FROM result1 GROUP by Id")
#avgRate
results <- sqldf("SELECT g.Id,g.Name,r.State,g.Points,substr(r.Name,16,4) as Pre_Ratings,a.average_opponent
FROM PlayersGames g
JOIN PlayersRatings r on  g.Id=r.Id
JOIN avgRate  a on g.Id=a.Id
")
results
library(RCurl)
library(plyr)
library(stringr)
library(sqldf)
chess_fields <- c("Number", "Name", "Points", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "EOL")
tournament <- read.table("tournamentinfo.txt", header = FALSE, skip = 4, sep = "|", fill = TRUE, stringsAsFactors = FALSE, col.names = chess_fields)
tournament <- subset(tournament, !Name == "", select = c(Number:R7))
PlayersGames<-subset(tournament, grepl("[:0-9:]+", Number))
PlayersGames$Id<-PlayersGames$Number
#PlayersGames
#lapply(PlayersGames$R1, function(x) str_extract_all(x, "[0-9]+"))
getRoundsData=function(games)
{
Round1=c()
for(i in 1:length(games))
{
val=c(lst,games[[i]][1])
if(is.na(val))
val=0
Round1[i]=val
#print(PlayersGames$Game1[[i]][1])
}
return(Round1)
}
i=1
df= data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R1, "[0-9]+")))
colnames(df)<-c("Id","OpponentsRounds")
df2 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R2, "[0-9]+")))
colnames(df2)<-c("Id","OpponentsRounds")
df3 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R3, "[0-9]+")))
colnames(df3)<-c("Id","OpponentsRounds")
df4 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R4, "[0-9]+")))
colnames(df4)<-c("Id","OpponentsRounds")
df5 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R5, "[0-9]+")))
colnames(df5)<-c("Id","OpponentsRounds")
df6 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R6, "[0-9]+")))
colnames(df6)<-c("Id","OpponentsRounds")
df7 = data.frame(PlayersGames$Id,getRoundsData(str_extract_all(PlayersGames$R7, "[0-9]+")))
colnames(df7)<-c("Id","OpponentsRounds")
OppRatings=rbind(df,df2,df3,df4,df5,df6,df7)
PlayersRatings<-subset(tournament, grepl("[:A-Z:]+", Number))
PlayersRatings$State=PlayersRatings$Number
PlayersRatings$Id=PlayersGames$Id
#PlayersRatings
result1=sqldf("SELECT g.Id,r.Id as OppId,cast(trim(substr(r.Name,16,4)) as int) as Pre_Ratings
FROM OppRatings g
JOIN PlayersRatings r on  cast(g.OpponentsRounds as int)=r.Id  ORDER BY g.Id ")
avgRate=sqldf("SELECT Id ,cast(ROUND(AVG(Pre_Ratings)) as int) as average_opponent FROM result1 GROUP by Id")
#avgRate
results <- sqldf("SELECT g.Name,r.State,g.Points,substr(r.Name,16,4) as Pre_Ratings,a.average_opponent
FROM PlayersGames g
JOIN PlayersRatings r on  g.Id=r.Id
JOIN avgRate  a on g.Id=a.Id
")
results
